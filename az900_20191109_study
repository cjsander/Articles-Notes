AZ-900T01-A - Microsoft Azure Fundamentals

Contents
AZ-900T01-A - Microsoft Azure Fundamentals	1
MODULE 1:  CLOUD CONCEPTS	2
WHY CLOUD?	2
KEY TERMS & CONCEPTS	2
Economies of Scale	4
CapEx Vs OpEx	4
Consumption based model	5
TYPES OF CLOUD MODELS	5
Public Cloud	5
Private Cloud	6
Hybrid Cloud	8
GREATEST DEGREE OF FLEXIBILITY	8
CLOUD MODEL COMPARISON	8
Public cloud	9
Private cloud	9
Hybrid cloud	10
TYPES OF CLOUD SERVICES	10
EXPENSE MODELS:	10
IaaS	11
PaaS	12
SaaS	12
MANAGEMENT RESPONSIBILITIES	13
CLOUD SERVICE COMPARISON	14
MODULE 2:  CORE AZURE SERVICES	16
CORE AZURE ARCHITECTURAL COMPONENTS	16
REGIONS	16
GEOGRAPHIES	17
AVAILABILITY ZONES	17
AVAILABILITY SETS	18
RESOURCE GROUPS	19
RESOURCE MANAGER	19
AZURE COMPUTE SERVICES	20
DEPLOY AZURE CONTAINER INSTANCES (ACI) IN AZURE PORTAL	24
AZURE NETWORKING SERVICES	25
WALKTHROUGH-CREATE A VIRTUAL NETWORK VIA THE AZURE PORTAL	27
AZURE STORAGE SERVICES	30


MODULE 1:  CLOUD CONCEPTS
After completing this module, you will be able to:
•	Describe and understand cloud services and their benefits.
•	Understand key terms you will encounter when working with cloud services.
•	Understand public, private, and hybrid cloud models.
•	Understand infrastructure as a service (IaaS).
•	Understand platform as a service (PaaS).
•	Understand software as a service (SaaS).
WHY CLOUD?
What is cloud computing?
Cloud computing is the delivery of computing services—servers, storage, databases, networking, software, analytics, intelligence and more—over the internet (the cloud), enabling faster innovation, flexible resources, and economies of scale. You typically pay only for cloud services you use, helping lower your operating costs, run your infrastructure more efficiently, and scale as your business needs change.
KEY TERMS & CONCEPTS
Cloud services is a big shift from the traditional way businesses think about IT resources. Cloud services have particular characteristics and considerations, some of which are outlined and explained below:
High availability. The ability to keep services up and running for long periods of time, with very little downtime, depending on the service in question.
Scalability. The ability to increase or decrease resources for any given workload. You can add additional resources to service a workload (known as scaling out), or add additional capabilities to manage an increase in demand to the existing resource (known as scaling up). Scalability doesn't have to be done automatically
Elasticity. The ability to automatically or dynamically increase or decrease resources as needed. Elastic resources match the current needs, and resources are added or removed automatically to meet future needs when it’s needed, and from the most advantageous geographic location. A distinction between scalability and elasticity is that elasticity is done automatically
Agility. The ability to react quickly. Cloud services can allocate and deallocate resources quickly. They are provided on-demand via self-service, so vast amounts of computing resources can be provisioned in minutes. There is no manual intervention in provisioning or deprovisioning services.
Fault tolerance. The ability to remain up and running even in the event of a component or service no longer functioning. Typically, redundancy is built into cloud services architecture so if one component fails, a backup component takes its place. The type of service is said to be tolerant of faults.
Disaster recovery. The ability to recover from an event which has taken down a cloud service. Cloud services disaster recovery can happen very quickly with automation and services being readily available to use.
Global reach. The ability reach audiences around the globe. Cloud services can have presence in various regions across the globe which you can access, giving you a presence in those regions even though you may not have any infrastructure in that region.
Customer latency capabilities. If customers are experiencing slowness with a particular cloud service, they are said to be experiencing some latency. Even though modern fiber optics are fast, it can still take time for services to react to customer actions if the service is not local to the customer. Cloud services have the ability deploy resources in datacenters around the globe, thus addressing customer latency issues.
Predictive cost considerations. The ability for users to predict what costs they will incur for a particular cloud service. Costs for individual services are made available, and tools are provided to allow you predict what costs a service will incur. You can also perform analysis based on future growth.
Technical skill requirements and considerations. Cloud services can provide and manage hardware and software for workloads. Therefore, getting a workload up and running with cloud services demands less technical resources than having IT teams build and maintain physical infrastructure for handling the same workload. A user can be expert in the application they want to run without having to need skills to build and maintain the underlying hardware and software infrastructure.
Increased productivity. On-site datacenters typically require a lot of hardware setup (otherwise known as racking and stacking), software patching, and other time-consuming IT management chores. Cloud computing eliminates the need for many of these tasks, so IT teams can spend time on achieving more important business goals.
Security. Cloud providers offer a broad set of policies, technologies, controls, and expert technology skills that can provide better security than most organizations can otherwise achieve. The result is strengthened security, which helps to protect data, apps, and infrastructure from potential threats.
A public cloud is owned by the cloud services provider (also known as a hosting provider). It provides resources and services to multiple organizations and users, who connect to the cloud service via a secure network connection, typically over the internet.
Economies of Scale
The concept of economies of scale is the ability to do things more cheaply and more efficiently when operating at a larger scale in comparison to operating at a smaller scale.
Cloud providers such as Microsoft, Google, and AWS are very large businesses, and are able to leverage the benefits of economies of scale, and then pass those benefits on to their customers.
This is apparent to end users in a number of ways, one of which is the ability to acquire hardware at a lower cost than if a single user or smaller business were purchasing it.
Storage costs, for example, have decreased significantly over the last decade due in part to cloud providers' ability to purchase larger amounts of storage at significant discounts. They are then able to use that storage more efficiently, and pass on those benefits to end users in the form of lower prices.
There are limits to the benefits large organizations can realize through economies of scale. A product will inevitably have an underlying core cost, as it becomes more of a commodity, based on what it costs to produce . Competition is also another factor which has an effect on costs of cloud services.
CapEx Vs OpEx
In previous years, startup companies needed to acquire a physical premises and infrastructure to start their business and begin trading. Large amounts of money were need to get a new business up and running, or to grow an existing company. They would have to buy new datacenters or new servers to allow them build out new services, which they could then deliver to their customers. That is no longer the case.
Today, organizations can sign up for a service from a cloud provider to get up and running. This enables them to begin selling or providing services to their customers more quickly, without the need for significant upfront costs.
These two approaches to investment are referred to as:
	Capital Expenditure (CapEx): This is the spending of money on physical infrastructure up front, and then deducting that expense from your tax bill over time. CapEx is an upfront cost which has a value that reduces over time.
	Operational Expenditure (OpEx): This is spending money on services or products now and being billed for them now. You can deduct this expense from your tax bill in the same year. There is no upfront cost, you pay for a service or product as you use it.
	Companies wanting to start a new business or grow their business do not have to incur upfront costs to try out a new product or service for customers. Instead, they can get into a market immediately and pay as much or as little for the infrastructure as the business requires. They also can terminate that cost if and when they need to.
	If your service is busy and you consume a lot of resources in a month, then you receive a large bill. If those services are minimal and don't use a lot of resources, then you will receive a smaller bill.
	A business can still use the CapEx expenditure strategy if they wish, but it is no longer a requirement that they do so.

Consumption based model
Cloud service providers operate on a consumption-based model, which means that end users only pay for the resources that they use. Whatever they use is what they pay for.
This consumption-based model brings with it many benefits, including:
•	No upfront costs
•	No need to purchase and manage costly infrastructure that they may or may not use to its fullest
•	The ability to pay for additional resources if and when they are needed
•	The ability to stop paying for resources that are no longer needed

TYPES OF CLOUD MODELS

Public Cloud
A public cloud is owned by the cloud services provider (also known as a hosting provider). It provides resources and services to multiple organizations and users, who connect to the cloud service via a secure network connection, typically over the internet.
Public cloud models have the following characteristics:
	Ownership. This is the resources that an organization or end user uses. Examples include storage and processing power. Resources do not belong to the organization that is utilizing them, but rather they are owned and operated by a third party such as the cloud service provider.
	Multiple End Users. Public cloud modes may make their resources available to multiple organizations.
	Public Access. This provides access to the public.
	Availability. This is the most common cloud-type deployment model.
	Connectivity. Users and organizations are typically connected to the public cloud over the internet using a web browser.
	Skills. Public clouds do not require deep technical knowledge to set up and use its resources.
 
With a public cloud, there is no local hardware to manage or keep up to date; everything runs on the cloud provider’s hardware. In some cases, cloud users can save additional costs by sharing computing resources with other cloud users.
A common use case scenario is deploying a web application or a blog site on hardware and resources that are owned by a cloud provider. Using a public cloud in this scenario allows cloud users to get their website or blog up quickly, and then focus on maintaining the site without having to worry about purchasing, managing or maintaining the hardware on which it runs.
Businesses can use multiple public cloud service provider companies of varying scale. Microsoft Azure is an example of a public cloud provider.
Private Cloud
A private cloud is owned and operated by the organization that uses the resources from that cloud. They create a cloud environment in their own datacenter, and provide self-service access to compute resources to users within their organization. The organization remains the owner, entirely responsible for the operation of the services they provide.
Private cloud models have the following characteristics:
	Ownership. The owner and user of the cloud services are the same.
	Hardware. The owner is entirely responsible for the purchase, maintenance, and management of the cloud hardware.
	Users. A private cloud operates only within one organization and cloud computing resources are used exclusively by a single business or organization.
	Connectivity. A connection to a private cloud is typically made over a private network that is highly secure.
	Public access. Does not provide access to the public.
	Skills. Requires deep technical knowledge to set up, manage, and maintain.
 
A use case scenario for a private cloud would be when an organization has data that cannot be put in the public cloud, perhaps for legal reasons. For example, they may have medical data that cannot be exposed publicly.
Another scenario may be where government policy requires specific data to be kept in-country or privately.
A private cloud can provide cloud functionality to external customers as well, or to specific internal departments such as Accounting or Human Resources.
Hybrid Cloud
A hybrid cloud combines both public and private clouds, allowing you to run your applications in the most appropriate location.
Hybrid cloud models have the following characteristics:
	Resource location. Specific resources run or are used in a public cloud, and others run or are used in a private cloud.
	Cost and efficiency. Hybrid cloud models allow an organization to leverage some of the benefits of cost, efficiency, and scale that are available with a public cloud model.
	Control. Organizations retain management control in private clouds.
	Skills. Technical skills are still required to maintain the private cloud and ensure both cloud models can operate together.
	Ownership is split

An example of a hybrid cloud usage scenario would be hosting a website in the public cloud and linking it to a highly secure database hosted in a private cloud.
Hybrid cloud scenarios can be useful when organizations have some things that cannot be put in a public cloud, possibly for legal reasons. For example, you may have medical data that cannot be exposed publicly.
Another example is one or more applications that run on old hardware that can’t be updated. In this case, you can keep the old system running locally in your private cloud, and connect it to the public cloud for authorization or storage.
GREATEST DEGREE OF FLEXIBILITY

Hybrid cloud model provides the greatest degree of flexibility, as you have the option to choose either public or private depending on your requirements.
Public cloud means you will not have full ownership over all aspects of the service.
Private cloud means there is upfront costs associated with creating, managing and maintaining your private cloud.
CLOUD MODEL COMPARISON
Below is an outline of some of the advantages and disadvantages for public, private, and hybrid clouds.

Public cloud
Advantages:
No CapEx. You don’t have to buy a new server in order to scale.
Agility. Applications can be made accessible quickly, and deprovisioned whenever needed.
Consumption-based model. Organizations pay only for what they use, and operate under an OpEx model.
Maintenance. Organizations have no responsibility for hardware maintenance or updates.
Skills. No deep technical skills are required to deploy, use, and gain the benefits of a public cloud. Organizations can leverage the skills and expertise of the cloud provider to ensure workloads are secure, safe, and highly available.
Disadvantages:
Security. There may be specific security requirements that cannot be met by using public cloud.
Compliance. There may be government policies, industry standards, or legal requirements which public clouds cannot meet.
Ownership. Organizations don't own the hardware or services and cannot manage them as they may wish.
Specific scenarios. If organizations have a unique business requirement, such as having to maintain a legacy application, it may be hard to meet that requirement with public cloud services.
Private cloud
Advantages:
Control. Organizations have complete control over the resources.
Security. Organizations have complete control over security.
Compliance. If organizations have very strict security, compliance, or legal requirements, a private cloud may be the only viable option.
Specific scenarios. If an organization has a specific scenario not easily supported by a public cloud provider (such as having to maintain a legacy application), it may be preferable to run the application locally.
Disadvantages:
Upfront CapEx. Hardware must be purchased for start-up and maintenance.
Agility. Private clouds are not as agile as public clouds, because you need to purchase and set up all the underlying infrastructure before they can be leveraged.
Maintenance. Organizations have the responsibility for hardware maintenance and updates.
Skills. Private clouds requires in-house IT skills and expertise that may be hard to get or be costly.
Hybrid cloud
Advantages:
Flexibility. The most flexible scenario; with a hybrid cloud setup, an organization can decide to run their applications either in a private cloud or in a public cloud.
Costs. Organizations can take advantage of economies of scale from public cloud providers for services and resources as they wish. This allows them to access cheaper storage than they can provide themselves.
Control. Organizations can still access resources over which they have total control.
Security. Organizations can still access resources for which they are responsible for security.
Compliance. Organizations maintain the ability to comply with strict security, compliance, or legal requirements as needed.
Specific scenarios. Organizations maintain the ability to support specific scenarios not easily supported by a public cloud provider, such as running legacy applications. In this case, they can keep the old system running locally, and connect it to the public cloud for authorization or storage. Additionally, they could host a website in the public cloud, and link it to a highly secure database hosted in their private cloud.
Disadvantages:
Upfront CapEx. Upfront CapEx is still required before organizations can leverage a private cloud.
Costs. Purchasing and maintaining a private cloud to use alongside the public cloud can be more expensive than selecting a single deployment model.
Skills. Deep technical skills are still required to be able to set up a private cloud.
Ease of management. Organizations need to ensure there are clear guidelines to avoid confusion, complications or misuse.
TYPES OF CLOUD SERVICES

EXPENSE MODELS:
Operational Expenditure (OpEx) is the correct answer. Cloud services operate on an Operational Expenditure model. It is regular, repeated expenditure that you pay for using cloud services.
Capital Expenditure (CapEx) is not the correct answer. Capital Expenditure (CapEx) is not required to be paid upfront when looking to start using a cloud services. There are no up front costs to use cloud services. You pay for what you consume, under a consumption based model.
Friendly expenditure and Maximum expense are not defined expenditure types.

 

IaaS
IaaS is the most basic category of cloud computing services. With IaaS, you rent IT infrastructure servers and virtual machines (VMs), storage, networks, and operating systems from a cloud provider on a pay-as-you-go basis. It's an instant computing infrastructure, provisioned and managed over the internet.
IaaS has the following characteristics:
•	Upfront costs. IaaS has no upfront costs. Users pay only for what they consume.
•	User ownership. The user is responsible for the purchase, installation, configuration, and management of their own software operating systems, middleware, and applications.
•	Cloud provider ownership. The cloud provider is responsible for ensuring that the underlying cloud infrastructure (such as virtual machines, storage and networking) is available for the user.
Note: When using IaaS, ensuring that a service is up and running is a shared responsibility: the cloud provider is responsible for ensuring the cloud infrastructure is functioning correctly; the cloud customer is responsible for ensuring the service they are using is configured correctly, is up to date, and is available to their customers. This is referred to as the shared responsibility model.
Common usage scenarios:
•	Migrating workloads. Typically, IaaS facilities are managed in a similar way as on-premises infrastructure, and provide an easy migration path for moving existing applications to the cloud.
•	Test and development. Teams can quickly set up and dismantle test and development environments, bringing new applications to market faster. IaaS makes scaling development testing environments up and down fast and economical.
•	Website hosting. Running websites using IaaS can be less expensive than traditional web hosting.
•	Storage, backup, and recovery. Organizations avoid the capital outlay and complexity of storage management, which typically requires a skilled staff to manage data and meet legal and compliance requirements. IaaS is useful for managing unpredictable demand and steadily growing storage needs. It can also simplify the planning and management of backup and recovery systems.
PaaS

PaaS provides an environment for building, testing, and deploying software applications. The goal of PaaS is to help create an application as quickly as possible without having to worry about managing the underlying infrastructure. For example, when deploying a web application using PaaS, you don't have to install an operating system, web server, or even system updates. PaaS is a complete development and deployment environment in the cloud, with resources that enable organizations to deliver everything from simple cloud-based apps to sophisticated cloud-enabled enterprise applications.
Resources are purchased from a cloud service provider on a pay-as-you-go basis and accessed over a secure Internet connection.
PaaS has the following characteristics:
•	Upfront costs. There are no upfront costs, and users pay only for what they consume.
•	User ownership. The user is responsible for the development of their own applications. However, they are not responsible for managing the server or infrastructure. This allows the user to focus on the application or workload they want to run.
•	Cloud provider ownership. The cloud provider is responsible for operating system management, and network and service configuration. Cloud providers are typically responsible for everything apart from the application that a user wants to run. They provide a complete managed platform on which to run an application.
Common usage scenarios:
•	Development framework. PaaS provides a framework that developers can build upon to develop or customize cloud-based applications. Similar to the way you create a Microsoft Excel macro, PaaS lets developers create applications using built-in software components. Cloud features such as scalability, high-availability, and multi-tenant capability are included, reducing the amount of coding that developers must do.
•	Analytics or business intelligence. Tools provided as a service with PaaS allow organizations to analyze and mine their data. They can find insights and patterns, and predict outcomes to improve business decisions such as forecasting, product design, and investment returns.

SaaS
SaaS is software that is centrally hosted and managed for the end customer. It allows users to connect to and use cloud-based apps over the internet. Common examples are email, calendars, and office tools such as Microsoft Office 365.

SaaS is typically licensed through a monthly or annual subscription, and Office 365 is an example of SaaS software.
SaaS has the following characteristics:
•	Upfront costs. Users have no upfront costs; they pay a subscription, typically on a monthly or annual basis.
•	User ownership. Users just use the application software; they are not responsible for any maintenance or management of that software.
•	Cloud provider ownership. The cloud provider is responsible for the provision, management, and maintenance of the application software.
Common usage scenarios:
Examples of Microsoft SaaS services include Office 365, Skype, and Microsoft Dynamics CRM Online.
MANAGEMENT RESPONSIBILITIES

The following list of cloud service types describes the management responsibilities for the user and the cloud provider as compared to on-premises systems:
•	IaaS requires the most user management of all the cloud services. The user is responsible for managing the operating systems, data, and applications.
•	PaaS requires less user management. The cloud provider manages the operating systems, and the user is responsible for the applications and data they run and store.
•	SaaS requires the least amount of management. The cloud provider is responsible for managing everything, and the end user just uses the software.


 
Note: It is important that users understand what they are responsible for, when using cloud services, to ensure their workloads are managed correctly and don't suffer any down time. There is a shared responsibility model for ensuring cloud workloads are run securely and in a well-managed way. Depending on the service you are using: the cloud provider is responsible for some aspects of the workload management, and the end user is responsible for other aspects of the workload management.
CLOUD SERVICE COMPARISON
There are both advantages and disadvantages for IaaS, PaaS, and SaaS cloud services.

IaaS
Infrastructure as a Service is the most flexible category of cloud services. It aims to give you complete control over the hardware that runs your application. Instead of buying hardware, with IaaS, you rent it.
Advantages:
•	No CapEx. Users have no upfront costs.
•	Agility. Applications can be made accessible quickly, and deprovisioned whenever needed.
•	Consumption-based model. Organizations pay only for what they use, and operate under an OpEx model.
•	Skills. No deep technical skills are required to deploy, use, and gain the benefits of a public cloud. Organizations can leverage the skills and expertise of the cloud provider to ensure workloads are secure, safe, and highly available.
•	Cloud benefits. Organizations can leverage the skills and expertise of the cloud provider to ensure workloads are made secure and highly available.
•	Flexibility: IaaS is the most flexible cloud service as you have control to configure and manage the hardware running your application.
Disadvantages:
•	Management. The shared responsibility model applies; the user manages and maintains the services they have provisioned, and the cloud provider manages and maintains the cloud infrastructure.
PaaS
PaaS provides the same benefits and considerations as IaaS, but there some additional benefits.
Advantages:
•	No CapEx. Users have no upfront costs.
•	Agility. PaaS is more agile than IaaS, and users do not need to configure servers for running applications.
•	Consumption-based model. Users pay only for what they use, and operate on an OpEx model.
•	Skills. No deep technical skills are required to deploy, use, and gain the benefits of PaaS.
•	Cloud benefits. Users can leverage the skills and expertise of the cloud provider to ensure their workloads are made secure and highly available. In addition, users can gain access to more cutting-edge development tools and toolsets. They then can apply these tools and toolsets across an application's lifecycle.
•	Productivity. Users can focus on application development only, as all platform management is handled by the cloud provider. Working with distributed teams as services is easier, as the platform is accessed over the internet and can be made globally available more easily.
Disadvantages:
•	Platform limitations. There may be some limitations to a particular cloud platform that could affect how an application runs. Any limitations should be taken into consideration when considering which PaaS platform is best suited for a particular workload.
SaaS
SaaS is software that is centrally hosted and managed for the end customer. It is usually based on an architecture where one version of the application is used for all customers, and licensed through a monthly or annual subscription
SaaS provides the same benefits as IaaS, but again there some additional benefits.
Advantages:
•	No CapEx. Users don’t have any upfront costs.
•	Agility. Users can provide staff with access to the latest software quickly and easily.
•	Pay-as-you-go pricing model: Users pay for the software they use on a subscription model, typically monthly or yearly, regardless of how much they use the software.
•	Flexibililty. Users can access the same application data from anywhere.
Disadvantages
•	Software limitations. There may be some limitations to a particular software application that might affect how users work. Any limitations should be taken into consideration when considering which PaaS platform is best suited for a particular workload.
Summary
IaaS, PaaS, and SaaS each contain different levels of managed services. You may easily use a combination of these types of infrastructure. You could use Office 365 on your company’s computers (SaaS), and in Azure you could host your VMs (IaaS) and use Azure SQL Database (PaaS) to store your data. With the cloud’s flexibility, you can use any combination that provides you with the maximum result.
 
MODULE 2:  CORE AZURE SERVICES
Learning Objectives
After completing this module, you will be able to:
•	Understand and describe core Azure architectural components.
•	Understand and describe core Azure services and products.
•	Understand and describe Azure solutions.
•	Understand and describe Azure management tools.
CORE AZURE ARCHITECTURAL COMPONENTS

REGIONS
Microsoft Azure is made up of datacenters located around the globe. These datacenters are organized and made available to end users by region.
A region is a geographical area on the planet containing at least one, but potentially multiple datacenters that are in close proximity and networked together with a low-latency network.
At the time of writing this, Azure is generally available in 42 regions around the world, with plans announced for 12 additional regions.
Azure also has some special regions that you might want to use when building out your applications for compliance or legal purposes. These special regions include:
•	US DoD Central, US Gov Virginia, US Gov Iowa and more: These are physical and logical network-isolated instances of Azure for US government agencies and partners. They are operated by screened US persons. Includes additional compliance certifications.
•	China East, China North and more: These regions are available through a unique partnership between Microsoft and 21Vianet, whereby Microsoft does not directly maintain the datacenters.
•	Germany Central and Germany Northeast: These regions are available through a data trustee model whereby customer data remains in Germany under control of T-Systems, a Deutsche Telekom company, acting as the German data trustee. Any user or enterprise who needs their data to reside in Germany can use this service.
Region pairs
Each Azure region is paired with another region within the same geography (such as US, Europe, or Asia). This approach allows for the replication of resources (such as virtual machine storage) across a geography that helps reduce the likelihood of interruptions due to events such as natural disasters, civil unrest, power outages, or physical network outages affecting both regions at once. Additional advantages of region pairs include:

•	In the event of a wider Azure outage, one region out of every pair is prioritized to help reduce the time it takes to restore them for applications.
•	Planned Azure updates are rolled out to paired regions one region at a time to minimize downtime and risk of application outage.
•	Data continues to reside within the same geography as its pair (except for Brazil South) for tax and law enforcement jurisdiction purposes.
•	Examples of region pairs would be West US paired with East US, and SouthEast Asia paired with East Asia.
GEOGRAPHIES
A geography is a discrete market typically containing two or more regions that preserves data residency and compliance boundaries.
Geographies allow customers with specific data-residency and compliance needs to keep their data and applications close. Geographies ensure that data residency, sovereignty, compliance, and resiliency requirements are honored within geographical boundaries. Geographies are fault-tolerant to withstand complete region failure through their connection to dedicated high-capacity networking infrastructure.
Geographies are broken up into Americas, Europe, Asia Pacific, Middle East and Africa.
AVAILABILITY ZONES
Availability zones are physically separate locations within an Azure region. Each availability zone is made up of one or more datacenters equipped with independent power, cooling, and networking. It is set up to be an isolation boundary. If one availability zone goes down, the other continues working. The availability zones are typically connected to each other through very fast, private fiber-optic networks.
Availability Zones is a high-availability offering that protects your applications and data from datacenter failures. Availability Zones are unique physical locations within an Azure region. Each zone is made up of one or more datacenters equipped with independent power, cooling, and networking. To ensure resiliency, there’s a minimum of three separate zones in all enabled regions. The physical separation of Availability Zones within a region protects applications and data from datacenter failures. Zone-redundant services replicate your applications and data across Availability Zones to protect from single-points-of-failure. With Availability Zones, Azure offers industry best 99.99% VM uptime SLA. The full Azure SLA explains the guaranteed availability of Azure as a whole.
Availability zones allow customers to run mission-critical applications with high availability and low-latency replication.
Availability zones are offered as a service within Azure, and to ensure resiliency, there’s a minimum of three separate zones in all enabled regions.
Availability Zones fall into two categories:
•	Zonal services – you pin the resource to a specific zone (for example, virtual machines, managed disks, Standard IP addresses), or
•	Zone-redundant services – platform replicates automatically across zones (for example, zone-redundant storage, SQL Database).
 
Regions that support Availability Zones include Central US, North Europe, SouthEast Asia, and more.
AVAILABILITY SETS
Availability sets are a way for you to ensure your application remains online if a high-impact maintenance event is required, or a hardware a failure occurs. Availability sets are made up of update domains and fault domains.
Update domains (UD). When a maintenance event occurs (such as a performance update or critical security patch applied to the host), the update is sequenced through update domains. Sequencing updates using update domains ensures that the entire datacenter isn't unavailable during platform updates and patching. Update domains are a logical section of the datacenter, and they are implemented with software and logic.
Fault domains (FD). Fault domains provide for the physical separation of your workload across different hardware in the datacenter. This includes power, cooling, and network hardware that supports the physical servers located in server racks. In the event the hardware that supports a server rack becomes unavailable, only that rack of servers would be affected by the outage.
 

RESOURCE GROUPS

A resource group is a unit of management for your resources in Azure. You can think of your resource group as a container that allows you to aggregate and manage all the resources required for your application in a single manageable unit. This allows you to manage the application collectively over its life cycle, rather than manage components individually.
You can manage and apply the following resources at resource group level:
•	Metering and billing
•	Policies
•	Monitoring and alerts
•	Quotas
•	Access control
•	Remember that when you delete a resource group you delete all resources contained within it.
Considerations
When creating and placing resources within resource groups there are a few considerations to take into account:
•	Each resource must exist in one, and only one, resource group.
•	A resource group can contain resources that reside in different regions.
•	You decide how you want to allocate resources to resource groups based on what makes the most sense for your organization.
•	You can add or remove a resource to a resource group at any time.
•	You can move a resource from one resource group to another.
•	Resources for an application do not need to exist in the same resource group. However, it is recommended that you keep them in the same resource group for ease of management.
RESOURCE MANAGER
Azure Resource Manager is a management layer in which resource groups and all the resources within it are created, configured, managed, and deleted. It provides a consistent management layer which allows you automate the deployment and configuration of resources using different automation and scripting tools, such as Microsoft Azure PowerShell, Azure Command-Line Interface (Azure CLI), Azure portal, REST API, and client SDKs.
With Azure Resource Manager, you can:
•	Deploy Application resources. Update, manage, and delete all the resources for your solution in a single, coordinated operation.
•	Organize resources. Manage your infrastructure through declarative templates rather than scripts. You can see which resources are linked by a dependency, and you can apply tags to resources to categorize them for management tasks, such as billing.
•	Control access and resources. You can control who in your organization can perform actions on the resources. You manage permissions by defining roles, adding users or groups to the roles, and applying policies at resource group level. Examples of elements you may wish to control are: enforcing naming convention on resources, limiting which types and instances of resources can be deployed, or limiting which regions can host a type of resource.
AZURE COMPUTE SERVICES
VM and Conatainers
Azure compute is an on-demand computing service for running cloud-based applications. It provides computing resources such as disks, processors, memory, networking and operating systems. The resources are available on-demand and can typically be made available in minutes or even seconds. You pay only for the resources you use and only for as long as you're using them.
There are two common service types for performing compute in Azure: virtual machines and containers.
What are virtual machines?
Virtual machines, (VMs), are software emulations of physical computers. They include a virtual processor, memory, storage, and networking resources. They host an operating system, and you're able to install and run software just like a physical computer. When using a remote desktop client, you can use and control the virtual machine as if you were sitting in front it.
Azure supports a wide range of computing solutions for development and testing, running applications, and extending your datacenter, including Linux, Windows Server, Microsoft SQL Server, Oracle, IBM, and SAP.
Azure also has many services that can run virtual machines, each providing different options depending on your requirements. Some of the most prominent services are VM Scale Sets, App Services, and Azure Functions.
Azure VMs
 
Azure VMs lets you create and use virtual machines in the cloud. It provides infrastructure as a service (IaaS) and can be used in a variety of different ways. When you need total control over an operating system and environment, Azure VMs are an ideal choice. Just like a physical computer, you're able to customize all of the software running on the VM. This is particularly helpful when you are running custom software or custom hosting configurations. See Virtual Machines for more details.
VM scale sets
 
Virtual machine scale sets are an Azure compute resource that you can use to deploy and manage a set of identical VMs. With all VMs configured the same, VM scale sets are designed to support true auto-scale—no pre-provisioning of VMs is required—and as such makes it easier to build large-scale services targeting big compute, big data, and containerized workloads. So, as demand goes up more virtual machine instances can be added, and as demand goes down virtual machines instances can be removed. The process can be manual, automated, or a combination of both. See Virtual Machine Scale Sets for more details.
App services
 
With App services, you can quickly build, deploy, and scale enterprise-grade web, mobile, and API apps running on any platform. You can meet rigorous performance, scalability, security and compliance requirements while using a fully managed platform to perform infrastructure maintenance. App Services is a platform as a service (PaaS) offering. See App Service for more details.
Functions
 
When you're concerned only about the code running your service and not the underlying platform or infrastructure, Azure Functions are ideal. They're commonly used when you need to perform work in response to an event (often via a REST request), timer, or message from another Azure service, and when that work can be completed quickly, within seconds or less. See Functions for more details.
What are containers?
Containers are a virtualization environment. However, unlike virtual machines they do not include an operating system. Instead, they reference the operating system of the host environment that runs the container.
Containers are meant to be lightweight and are designed to be created, scaled out, and stopped dynamically. This allows you to respond to changes on demand and quickly restart in case of a crash or hardware interruption.
Azure supports Docker containers, and there several ways to manage both Docker and Microsoft-based containers in Azure.
Azure Container Instances
 
Azure Container Instances offers the fastest and simplest way to run a container in Azure without having to manage any virtual machines or adopt any additional services. It is a PaaS offering that allows you to upload your containers, which it will run for you. See Container Instances for more details.
Azure Kubernetes Service
 
The task of automating and managing a large number of containers and how they interact is known as orchestration. Azure Kubernetes Service (AKS) is a complete orchestration service for containers with distributed architectures and large volumes of containers. See Azure Kubernetes Service (AKS) for more details.

Walkthrough-Create a Virtual machine using Azure Portal
In this walkthrough task we will create a virtual machine in Azure via the Azure Portal, configure it as a web server and connect to the web server over the internet.
You can complete this walkthrough task by completing the steps outlined below, or you can simply read through them, depending on your available time.
Steps
1.	Sign in to the Azure portal at https://portal.azure.com
2.	Choose Create a resource in the upper left-hand corner of the Azure portal.
3.	In the search box above the list of Azure Marketplace resources, search for and select Windows Server 2016 Datacenter, then choose Create.
4.	In the Basics tab, under Project details, make sure the correct subscription is selected and then choose to Create new resource group. Type myResourceGroup for the name.
5.	Under Instance details, type myVM for the Virtual machine name and choose East US for your Location. Leave the other defaults.
6.	Under the Administrator account section, provide a username, such as azureuser and a password. The password must be at least 12 characters long and meet the defined complexity requirements.
7.	Under Inbound port rules, choose Allow selected ports and then select RDP (3389) and HTTP (80) from the drop-down. These are to allow us to connect to the virtual machine using RDP over port 3389 and then to see a web page display over HTTP on port 80.
8.	Go to the Management tab and under the Monitoring section under Boot diagnostics select Off
9.	Leave the remaining defaults and then select the Review + create button at the bottom of the page.
10.	Once Validation is passed click the Create button. It can take approx. three to five minutes to deploy the virtual machine.
11.	Once the virtual machine is created, go to the resource group you placed the virtual machine in, and open up the virtual machine, then click the Connect button on the virtual machine properties page.
a.	Note: The following directions tell you how to connect to your VM from a Windows computer. On a Mac, you need an RDP client such as this Remote Desktop Client from the Mac App Store and on Linux virtual machine you could connect directly from a bash shell using ssh.
12.	In the Connect to virtual machine page, keep the default options to connect by DNS name over port 3389 and click Download RDP File.
13.	Open the downloaded RDP file and click Connect when prompted.
14.	….
15.	Congratulations! You have deployed and connected to a Windows Server virtual machine in Azure
16.	
17.	If you wish and have time you could also make the deployed server a functioning web server and make a web page available publicly, by continuing with the following steps
18.	Open up a PowerShell command prompt on the virtual machine, by clicking the Start button, typing PowerShell right clicking Windows PowerShell in the menu and selecting Run as administrator
19.	Install the Web-Server feature in the virtual machine by running the following command in the PowerShell command prompt: PowerShell
a.	Install-WindowsFeature -name Web-Server –IncludeManagementTools
20.	When completed you should see a prompt stating Success with a value True, among other items in the output. You do not need to restart the virtual machine to complete the installation. Close the RDP connection to the VM.
21.	Back in the portal, select the VM and in the overview pane of the VM, use the Click to copy button to the right of the IP address to copy it and paste it into a browser tab.
22.	The default IIS Web Server welcome page will open, and is available to connect to publicly via this IP address, or via the fully qualified domain name.
Congratulations! You have created a web server that can be connected to publicly via this IP address, or via the fully qualified domain name. If you had a web page to host you could deploy those source files to the virtual machine and host them for public access on the deployed virtual machine.
Note: Remember to remove any newly created Azure resources that you no longer use. Removing unused resources ensures you will not incur unexpected costs. Remove unused resources by deleting the Resource Group that the unused resources belong to.
DEPLOY AZURE CONTAINER INSTANCES (ACI) IN AZURE PORTAL
In this walkthrough, you create, configure, and deploy a Docker container to Azure Container Instances (ACI) in Azure Portal. The container is created from an image template called microsoft/aci-helloworld. The image packages a small web application, written in Node.js, and serves a static HTML page.
Finish this walkthrough by completing the steps that follow, or by reading through them.
Steps
1.	To create a new Azure Container Instance, sign in to the Azure Portal and locate the Azure Container Instance service, then select Create, or alternatively, click on this Create Container Instance link and when prompted, sign into Azure Portal.
2.	Provide the following basic details for the new container instance. The UI you encounter may be slightly different compared to the screenshots in this walkthrough, depending on if you accessed the Create New Container Instance via the Azure portal or via the Deploy to Azure button above, however the details provided will be the same.
a.	Container name: mycontainer
b.	Container image type: Public
c.	Container image: microsoft/aci-helloworld
d.	Subscription: Choose your subscription.
e.	Resource group: Select Create new, then type myResourceGroup, and select OK.
f.	Location: Use the dropdown to choose the Azure region that is closest to you.
g.	Press the OK button.

3.	Configure the new container instance as follows.
a.	DNS name label: Specify a DNS name label for your container. The DNS name label you specify must be unique within the Azure region where you create the container instance. Your container will be publicly reachable at http://<dns-name-label>.<region>.azurecontainer.io. If you receive a DNS name label not available error message, specify a different DNS name label.
b.	Leave all other settings in the Configuration pane at their default values.
c.	Select OK to start the automatic validation process.
4.	When the validation process has passed, review the configuration summary, and select the OK button to begin deploying the container.
5.	When the deployment starts, a notification appears in Azure Portal indicating the deployment is in progress. Another notification is displayed when the container deployment has completed successfully. Wait for the deployment succeeded notification before going to Step 6.
6.	Obtain the Fully Qualified Domain Name (FQDN), in Azure Portal, by opening the Overview pane for the container group and navigating to Resource Groups > myResourceGroup > mycontainer. Make a note of the FQDN of the container instance, as well it's Status.
7.	When the Status value of the container instance is Running, navigate to the container's FQDN in a web browser.
a.	Note: You can also navigate to the container's IP address in your browser. You can obtain the IP address by following Step 6, and making a note of the IP address instead of the FQDN.
Congratulations! You have used Azure Portal to deploy an application to a container in Azure Container Instances successfully.
Note: Remember to remove any newly created Azure resources that you no longer use. Removing unused resources ensures you will not incur unexpected costs. Remove unused resources by deleting the Resource Group that the unused resources belong to.
AZURE NETWORKING SERVICES
Networking on Azure allows you to connect cloud and on-premises infrastructure and services to provide your customers and users the best possible experience. Once the resources move to Azure, they require the same networking functionality as an on-premises deployment. In specific scenarios, they may require some level of network isolation. Azure networking components offer a range of functionality and services that can help organizations design and build cloud infrastructure services that meet their requirements.
Some of the most common networking service types in Azure are discussed in the following sections.
Azure Virtual Network
 
Azure Virtual Network enables many types of Azure resources such as Azure VMs to securely communicate with each other, the internet, and on-premises networks. A virtual network is scoped to a single region; however, multiple virtual networks from different regions can be connected together using virtual network peering. With Azure Virtual Network you can provide isolation, segmentation, communication with on-premises and cloud resources, routing and filtering of network traffic. See Virtual Network for more details.
Azure Load Balancer
 
Azure Load Balancer can provide scale for your applications and create high availability for your services. Load Balancer supports inbound and outbound scenarios, provides low latency and high throughput, and scales up to millions of flows for all Transmission Control Protocol (TCP) and User Datagram Protocol (UDP) applications. You can use Load Balancer with incoming internet traffic, internal traffic across Azure services, port forwarding for specific traffic, or outbound connectivity for VMs in your virtual network. See Load Balancer for more details.
VPN gateway
 
A VPN gateway, can also be referred to as a virtual network gateway, but a VPN gateway is a specific type of virtual network gateway that is used to send encrypted traffic between an Azure Virtual Network and an on-premises location over the public internet. It provides a more secure connection from on-premises to Azure over the internet. See VPN Gateway for more details.
Azure Application Gateway
 
Azure Application Gateway is a web traffic load balancer that enables you to manage traffic to your web applications. It is the connection through which users connect to your application. With Application Gateway you can route traffic based on source IP address and port to a destination IP address and port. You also can help protect a web application with a web application firewall, redirection, session affinity to keep a user on the same server, and many more configuration options. See Application Gateway for more details.
Content Delivery Network
 
A content delivery network (CDN) is a distributed network of servers that can efficiently deliver web content to users. It is a way to get content to users in their local region to minimize latency. CDN can be hosted in Azure or any other location. You can cache content at strategically placed physical nodes across the world and provide better performance to end users. Typical usage scenarios include web applications containing multimedia content, a product launch event in a particular region, or any event where you expect a high bandwidth requirement in a region. See Content Delivery Network for more details.
Note: For a full list of networking services available with Azure, and context on when you use them, see the page Networking.
WALKTHROUGH-CREATE A VIRTUAL NETWORK VIA THE AZURE PORTAL
In this walkthrough task we will create a virtual network, deploy two virtual machines onto that virtual network and then configure them to allow one virtual machine to ping the other over that virtual network.
You can complete this walkthrough task by completing the steps outlined below, or you can simply read through them, depending on your available time.
Steps
1.	Sign in to the Azure portal at https://portal.azure.com
2.	Choose Create a resource in the upper left-hand corner of the Azure portal, then select Networking > Virtual network
3.	In the Create virtual network pane above the list of Azure Marketplace resources, search for and select Windows Server 2016 Datacenter, then choose Create.
Setting	Value
Name	vnet1
Address space	10.1.0.0/16
Subscription	< Select your subscription >
Resource group	Select Create new, enter vnet1-rg1, then select OK.
Location	East US
Subnet - Name	subnet1
Subnet Address range	10.1.0.0/24
Leave the rest of the settings at their default values and select Create.
4.	Verify the creation of the virtual network by going to the newly created resource group and viewing the virtual network is present, you can click on the virtual network and view its properties if you wish.
5.	Create a virtual machine by going to the upper-left side of the Azure Portal and selecting Create a resource > Compute > Windows Server 2016 Datacenter
6.	In Create a virtual machine - Basics tab, enter or select this information: … 
7.	Select Next : Disks, leave the default values.
8.	Select Next: Networking, complete with following details …
9.	Select Next : Management, accept all the default values except for the below settings:
10.	Select Review + create. Azure will validate the configuration. When you see that Validation passed, select Create. Deployment times can vary but it can generally take between three to six minutes to deploy.
11.	Create a second Virtual machine by repeating steps 5 to 9 above, using the same values above ensuring the below settings are set:  …
12.	When finished filling in the details, validate the configuration by clicking Review + create and once successfully validated click Create
13.	When both virtual machine have completed deployment connect to the first virtual machine, vm1, by going to the resource group you placed the virtual machine in, vnet-rg1 and open up the virtual machine, then click the Connect button on the virtual machine properties page.  
Note: The following directions tell you how to connect to your VM from a Windows computer. On a Mac, you need an RDP client such as this Remote Desktop Client from the Mac App Store and on Linux virtual machine you could connect directly from a bash shell using ssh.
14.	In the Connect to virtual machine page, keep the default options to connect by DNS name over port 3389 and click Download RDP File.
15.	Open the downloaded RDP file and click Connect when prompted.
16.	You may receive a certificate warning during the sign-in process. Click Yes or to create the connection and connect to your deployed VM. You should connect successfully.
17.	Open up a PowerShell command prompt on the virtual machine, by clicking the Start button, typing PowerShell right clicking Windows PowerShell in the menu and selecting Run as administrator
18.	Run the command
ping vm2
You receive an error, saying request timed out. The ping fails, because ping uses the Internet Control Message Protocol (ICMP). By default, ICMP isn't allowed through the Windows firewall.
19.	To allow vm2 to ping vm1 enter the below command. This command allows ICMP inbound through the Windows firewall:
New-NetFirewallRule –DisplayName “Allow ICMPv4-In” –Protocol ICMPv4
20.	 Connect to VM2 as has been done for VM1, using rdp. i.e. open vm2 properties and click the Connect button to download and then connect vis RDP
21.	Open up a PowerShell command prompt on the virtual machine, VM2, and run the command:
ping vm1
You should now be able to ping the vm1 virtual machine successfully, because ICMP has been configured to be allowed through the Windows firewall on the vm1 virtual machine in an earlier step.
Congratulations! This ping is being done using the virtual network you created and deployed the two virtual machines into. The two virtual machines are communicating over this virtual network that was created.
Note: Remember to remove any newly created Azure resources that you no longer use. Removing unused resources ensures you will not incur unexpected costs. Remove unused resources by deleting the Resource Group that the unused resources belong to.

AZURE STORAGE SERVICES









